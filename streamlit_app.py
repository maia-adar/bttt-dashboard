import streamlit as st
import pandas as pd
from datetime import datetime
import requests
from PIL import Image
from io import BytesIO

st.cache_data.clear()

st.set_page_config(page_title="Sleep Dashboard", layout="centered")

st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
    
    /* Apply Inter font globally */
    html, body, div, span, appview-container, [class*="css"], .stText, .stMarkdown, .stDataFrame, .stButton, .stHeader, h1, h2, h3, h4, h5, h6, table, th, td {
        font-family: 'Inter', sans-serif !important;
    }

    /* Apply Inter font to Streamlit tables */
    .dataframe table {
        font-family: 'Inter', sans-serif !important;
    }
    </style>
    """, unsafe_allow_html=True)


# st.markdown(
#     "<h1 style='text-align: center; color: #17065b;'>Dashboard:<br>The Big Taping Truth Trial</h1>",
#     unsafe_allow_html=True
# )

# Today’s date format
today = datetime.today().strftime("%Y-%m-%d")

# File IDs (from Google Drive)
FILE_IDS = {
    "image": "1-D4sGmzF1syGUTUO_5UfloMLpLRqPnh8",
    "funnel": "1-Apq66H0DOEEfuCp5ghL4nRIOMb1WRiL",
    "taping": "1-9-FZjceasHwrFQ5y6H9I7Bs7myPjixW",
    "date": "1JnMsTkRbQuF3ir0ROhd9IR5RL70vt13F",
    "diffs1": "1y9TpWg8QiUE1kYqbLVUPbD8IvtqMhGiF",
    "diffs2": "153xTgBU3UYMBjes1_Ih5v0HuE24RvfeA",
    "diffs3": "1Ock7QkK8_0mQgmChXOqj9ylQgIhou0bx",
    "diffs4": "18k_ACZ-ZUbZNoY-5HWbJuoSKIflUqLyy"
}

# Build direct links
def drive_url(file_id):
    return f"https://drive.google.com/uc?id={file_id}"

# Show funnel data
st.subheader("Current Number of Participants")
try:
    funnel_df = pd.read_csv(drive_url(FILE_IDS["funnel"]))
    num_participants = funnel_df["Participants"].iloc[4]  # adjust column name if needed
    st.markdown(f"<h1 style='text-align: center; color: #17065b;'>{int(num_participants):,}</h1>", unsafe_allow_html=True)

except Exception as e:
    st.error("Couldn't load funnel data.")
    st.exception(e)

st.subheader("Current Amount of Data Collected")

try:
    taping_df = pd.read_csv(drive_url(FILE_IDS["taping"]))
    taping_df.columns = ["Data Type", "Amount"]
    taping_df = taping_df.reset_index(drop=True)

    # Display as stylized text blocks
    for i, row in taping_df.iterrows():
        st.markdown(f"""
        <div style="margin-bottom: 10px; padding: 10px; border-left: 4px solid #7c0061; background-color: #f9f9f9;">
            <strong>{row['Data Type']}:</strong> {row['Amount']}
        </div>
        """, unsafe_allow_html=True)

except Exception as e:
    st.error("Couldn't load taping data.")
    st.exception(e)



# Show image
image_url = drive_url(FILE_IDS["image"])

st.subheader("Current Results")
# Show the last updated date
try:
    # Read the date file
    date_df = pd.read_csv(drive_url(FILE_IDS["date"]), header=None)
    last_updated_date = date_df.iloc[1, 0]  # Get the second cell (vertically)

    # Display the date in small, gray font
    st.markdown(f"""
        <p style="font-size:12px; color:gray;">
            Last updated: {last_updated_date}
        </p>
        """, unsafe_allow_html=True)
except Exception as e:
    st.error("Couldn't load the last updated date.")
    st.exception(e)
try:
    response = requests.get(image_url)
    image = Image.open(BytesIO(response.content))
    st.image(image, use_container_width=True)
except Exception as e:
    st.error("Failed to load image.")
    st.exception(e)
st.markdown("""
    <p style="font-size:12px; color:gray;">
        Note: Do not publish. This dashboard displays combined averages, but final results must be based on a within-subjects analysis.
    </p>
    """, unsafe_allow_html=True)

image_fileids = [
    "diffs1",
    "diffs2",
    "diffs3",
    "diffs4"
]

for id in image_fileids:
    try:
        image_url = drive_url(FILE_IDS[id])
        response = requests.get(image_url)
        image = Image.open(BytesIO(response.content))
        st.image(image, use_container_width=True)
    except Exception as e:
        st.error(f"Failed to load image")
        st.exception(e)

#Metric definitions
st.markdown('<h5 style="color: #17065b; font-weight: 600;">Metric Definitions</h5>', unsafe_allow_html=True)
st.markdown("""
<div style="font-size: 0.7em;">
  <ul>
    <li><strong>Fitness Tracker Score:</strong> A composite score generated by the fitness tracker that reflects overall sleep quality, recovery, and readiness based on multiple physiological signals. <em>(Higher is better)</em></li>
    <li><strong>Subjective Score (1–5):</strong> A self-reported rating of how the user felt their sleep was overall, with 1 being very bad and 5 being very good. <em>(Higher is better)</em></li>
    <li><strong>Average HRV:</strong> Heart Rate Variability, a measure of the variation in time between heartbeats. Higher HRV is associated with better recovery and lower stress. <em>(Higher is better)</em></li>
    <li><strong>Sleep Efficiency:</strong> The percentage of time spent asleep while in bed, calculated as (total sleep time ÷ time in bed) × 100. <em>(Higher is better)</em></li>
    <li><strong>Heart Rate:</strong> The average or resting heart rate during the night. Lower values can indicate better cardiovascular fitness and recovery. <em>(Lower is better)</em></li> 
    <li><strong>Respiratory Rate:</strong> The number of breaths taken per minute during sleep. Stable, lower values within a healthy range are generally better. <em>(Lower is typically better)</em></li>
  </ul>
</div>
    """, unsafe_allow_html=True)
